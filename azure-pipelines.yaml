# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
  
parameters:
- name: action 
  displayName: Accion a ejecutar 
  type: string 
  default: deploy 
  values: 
  - deploy 
  - destroy


variables:
 - name: action
   value: deploy

steps:

- task: AWSShellScript@1
  displayName: 'iniciar terraform'
  inputs:
    awsCredentials: 'Test_AWS_Terraform'
    regionName: 'us-east-1'
    scriptType: 'inline'
    disableAutoCwd: true
    workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/'
    inlineScript: 'terraform init'
    
- ${{ if eq(variables.action, 'deploy') }}:
  
  - task: AWSShellScript@1
    displayName: 'terraform plan'
    inputs:
      awsCredentials: 'Test_AWS_Terraform'
      regionName: 'us-east-1'
      scriptType: 'inline'
      disableAutoCwd: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/'
      inlineScript: 'terraform plan -var-file="backend.tfvars"'

  - task: AWSShellScript@1
    displayName: 'terraform apply'
    inputs:
      awsCredentials: 'Test_AWS_Terraform'
      regionName: 'us-east-1'
      scriptType: 'inline'
      disableAutoCwd: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/'
      inlineScript: 'terraform apply -var-file="backend.tfvars" -auto-approve'

- ${{ if eq(variables.action, 'destroy') }}:    

  - task: AWSShellScript@1
    displayName: 'finalizar con terraform'
    inputs:
      awsCredentials: 'Test_AWS_Terraform'
      regionName: 'us-east-1'
      scriptType: 'inline'
      disableAutoCwd: true
      workingDirectory: '$(System.DefaultWorkingDirectory)/configuration/'
      inlineScript: 'terraform destroy -var-file="backend.tfvars" -auto-approve'
